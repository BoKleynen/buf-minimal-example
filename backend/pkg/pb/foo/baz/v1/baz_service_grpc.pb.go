// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: foo/baz/v1/baz_service.proto

package bazv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BazServiceClient is the client API for BazService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BazServiceClient interface {
	// Sends an update to the service.
	//
	// Lorem ipsum dolor sit amet, consectetur adipiscing elit,
	// sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
	LogSomething(ctx context.Context, in *LogSomethingRequest, opts ...grpc.CallOption) (*LogSomethingResponse, error)
}

type bazServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBazServiceClient(cc grpc.ClientConnInterface) BazServiceClient {
	return &bazServiceClient{cc}
}

func (c *bazServiceClient) LogSomething(ctx context.Context, in *LogSomethingRequest, opts ...grpc.CallOption) (*LogSomethingResponse, error) {
	out := new(LogSomethingResponse)
	err := c.cc.Invoke(ctx, "/foo.baz.v1.BazService/LogSomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BazServiceServer is the server API for BazService service.
// All implementations should embed UnimplementedBazServiceServer
// for forward compatibility
type BazServiceServer interface {
	// Sends an update to the service.
	//
	// Lorem ipsum dolor sit amet, consectetur adipiscing elit,
	// sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
	LogSomething(context.Context, *LogSomethingRequest) (*LogSomethingResponse, error)
}

// UnimplementedBazServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBazServiceServer struct {
}

func (UnimplementedBazServiceServer) LogSomething(context.Context, *LogSomethingRequest) (*LogSomethingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogSomething not implemented")
}

// UnsafeBazServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BazServiceServer will
// result in compilation errors.
type UnsafeBazServiceServer interface {
	mustEmbedUnimplementedBazServiceServer()
}

func RegisterBazServiceServer(s grpc.ServiceRegistrar, srv BazServiceServer) {
	s.RegisterService(&BazService_ServiceDesc, srv)
}

func _BazService_LogSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogSomethingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BazServiceServer).LogSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.baz.v1.BazService/LogSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BazServiceServer).LogSomething(ctx, req.(*LogSomethingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BazService_ServiceDesc is the grpc.ServiceDesc for BazService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BazService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foo.baz.v1.BazService",
	HandlerType: (*BazServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogSomething",
			Handler:    _BazService_LogSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foo/baz/v1/baz_service.proto",
}
